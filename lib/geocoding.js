'use strict';function _asyncToGenerator(fn){return function(){var gen=fn.apply(this,arguments);return new Promise(function(resolve,reject){function step(key,arg){try{var info=gen[key](arg);var value=info.value}catch(error){reject(error);return}if(info.done){resolve(value)}else{return Promise.resolve(value).then(function(value){step('next',value)},function(err){step('throw',err)})}}return step('next')})}}const request=require('sync-request');const APIconf=require('./config/api');const db=require('./config/db');const utils=require('./modules/utils');const sleep=require('./modules/sleep');const establishments=db.collection('establishments_geocoding');const query={'coords':{$exists:false}};const MAX_REQUEST=5000;const TIMEOUT=1000;let count=0;const fetchPlace=doc=>{const prefix='[FetchPlace]';let queryParams=doc.nomeFantasia;let url=`${APIconf.endpoints.places}query=${encodeURIComponent(queryParams)}`;console.log(`${prefix} Requesting Place: ${doc.nomeFantasia}`);console.log(`${prefix} Requesting URL: ${url}`);let res=request('GET',url);let data=JSON.parse(res.getBody());if(data&&data.status=='ZERO_RESULTS'){return null}return data};const fetchGeocode=doc=>{let queryParams=doc.nomeFantasia;let url=`${APIconf.endpoints.geocode}address=${encodeURIComponent(utils.parseAddress(doc))}`;console.log(`[Geocode] Requesting Address: ${utils.parseAddress(doc)}`);console.log(`[Geocode] Requesting URL: ${url}`);let res=request('GET',url);let data=JSON.parse(res.getBody());console.log('**********');console.log(data);console.log('**********')};const synchronize=(()=>{var _ref=_asyncToGenerator(function*(){const prefix='[Synchronize]';if(count==MAX_REQUEST)return;if(count>0)yield sleep(TIMEOUT);return establishments.count(query).then(function(c){if(!c)return;console.log(`${prefix} Found ${c} record(s)`);return establishments.findOne(query).then(function(doc){console.log(`${prefix} Found record!`);console.log(`${prefix} Doc: ${doc.nomeFantasia}`);let data=fetchPlace(doc);if(data){establishments.update({_id:doc._id},{$set:{gmapinfo:data}}).then(function(doc){console.log(`${prefix}[Success] Doc: ${doc.nomeFantasia} updated successfully`)}).catch(function(err){console.log('ERROR',err)}).then(function(){console.log(`-----------------------------`)})}}).then(function(){count++;return synchronize()})}).catch(function(err){console.log(err)})});return function synchronize(){return _ref.apply(this,arguments)}})();const init=()=>{let s=Promise.resolve(synchronize());return Promise.all([s])};init().then(()=>{console.log('Finished');process.exit()},err=>{console.log('Finished with error');console.log(err);process.exit()});